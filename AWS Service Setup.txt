DOcumentation:

Pre-Terraform Steps:

Creating an SSL Certificate (steps 1 - 5 from certbot.eff.org): 
1.) sudo apt-get install software-properties-common 
2.) sudo add-apt-repository universe 
3.) sudo add-apt-repository ppa:certbot/certbot 
4.) sudo apt-get install certbot python-certbot-apache 
5.) sudo certbot certonly --apache 
6.) use the locally generated certificate body, private key and chain and import key to the AWS Certificate Manager
7.) This certificate will be used by the load balancer to provide an encrypted connection


Create an Elastic IP:
1.) Create an Elastic IP either from AWS Pool or from your own
2.) This ip will be assigned to the NAT instance to keep it consitent at all times


Terraform Steps:

Setting Up VPC: 
1.) Set a CIDT Block to "10.0.0.0/16"
2.) Enable DNS Hostnames
3.) Enable DNS Support
4.) Create an internet gateway specifying this VPC id


Creating a Public / Private Subnet:
1.) Specify the cidr block
2.) Specify the VPC that subnet belongs to
3.) Specifyc the availability zones
4.) Create a relationship between subnet and route table that would link them
5.) Repeat 3 times for Public and 3 times for Private (different availability zones)


Creating Bastion / NAT instnace Security Group:
1.) Specify the VPC that security group is under
2.) Specicy ingress rules SSH to allow all inbound connections
3.) Override the default rule to allow all outbound traffic


Creating the default Security group (EC, ELB, etc):
1.) Specicy the VPC that the security group is under
2.) Specicy the SSH ingress rule as previously created security group to only allow connections through bastion
3.) Overide the default rule to allow all outbound traffic
4.) Add a rule for HTTP and HTTPS to allow secure website hosting


Creating the Host Ec2 Instance:
1.) Specify the Ubuntu AMI Id
2.) Specify instnace type
3.) Specify keypair that will acess the instance
4.) Give the ec2 a random public ip
5.) Assign the "default" security group
6.) Place it under public subnet
7.) Hard-Coded fixed private IP - for automatic Ansible connection


Creating the Host Ec2 Instance:
1.) Specify the Ubuntu AMI Id
2.) Specify instnace type
3.) Specify keypair that will acess the instance
4.) Give the ec2 a random public ip (overriden later)
5.) Assign the "default" security group
6.) Place it under public subnet
7.) Associate the ec2 as a NAT instnace for the VPC
8.) Associate the ec2 with a previously created elastic (static) ip for automatic Ansible connection


Creating an Elastic Load Balancer:
1.) Specify at least 2 public subnets to be used
2.) Create an HTTP listener on ec2 port 80
3.) Create an HTTP listener on ec2 port 443, using the already existing certificate
4.) Associate to an ec2 instance
5.) Specify health check variables accordingly
6.) Assign a proper security group


Creating the route 53 Hosted Zone:
1.) Specify the hosted zone's domain name
2.) Add an alias record for each domain name with zone id as the hosted Route 53 zone
3.) Allias records must be linked to previously created Elastic Load Balancer for Alias DNS name and Zone Id


Ansible Playbook:
1.) Establish an SSH connection with the Target instnace (incomplete step)
2.) Update and upgrade all package listening
3.) Install apache2 server
4.) Clone the git repository with all the files needed for website
5.) Copy each website file and the apache2.conf file to their appropriate locations

Creating IAM Users:
1.) You will have specify the arn policy or create an arn policy that you would like to use.
2.) You will have specify the name of the user you eant to give.
3.) You will have to reuqest an access key which will then be output for the user to see.

Creating S3 Bucket:
1.) You will have to rename the bucket that you want to create.
2.) You will also have to reanme the dynamodb table that you want to create.



